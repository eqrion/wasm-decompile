module {

func 0() {
  i0: i32
  i1: i32
  i2: i32
  i3: i32
  i4: i32
  i5: i32
  i6: i32
  i7: i32
  i8: i32
  i9: i32
  i10: i32
  i11: i32
  i12: i32
  i13: i32
  i14: i32
  i15: i32
  i16: i32
  i17: i32
  i18: i32
  temp0: i32
  temp1: i32
  temp2: i32
  temp3: i32
  temp4: i32
  temp5: i32
  temp6: i32
  temp7: i32
  temp8: i32
  temp9: i32
  temp10: i32
  temp11: i32
  temp12: i32

  i0 = memory[404]
  i1 = memory[400] << 2
  i2 = 256
  i3 = -1
  br @1

@1:
  temp0 = memory[i2]
  temp1 = i4
  i4 = memory[i2]
  i5 = temp0 - temp1
  temp2 = i10
  i10 = memory[i1]
  if eqz(temp2)
     br @28
  br @2

@2:
  i7 = memory[i1] << 2
  temp3 = i9
  i9 = 0
  i8 = temp3
  br @3

@3:
  if i9 >=_u i10
     br @17
  br @4

@4:
  temp4 = i12
  i12 = i9 + i10 >>_u 1
  temp5 = i16
  i16 = temp4 << 2
  temp6 = i13
  i13 = temp5 + i16 << 1 + i7
  i14 = memory[temp6]
  temp7 = i11
  i11 = i5 - i14
  if eqz(temp7)
     br @5
  br @12

@5:
  if i14 <=_u 4
     br @7
  br @6

@6:
  i15 = i0 + memory[i13]
  br @8

@7:
  i15 = i13 + 4
  br @8

@8:
  temp8 = i16
  i16 = i4
  i18 = temp8 + i5
  i17 = i15
  br @9

@9:
  temp9 = i11
  i11 = memory[i16] - memory[i17]
  if temp9
     br @12
  br @10

@10:
  temp10 = i16
  i16 = i16 + 1
  if temp10 == i18
     br @12
  br @11

@11:
  i17 = i17 + 1
  br @9

@12:
  if i11 <_s 0
     br @16
  br @13

@13:
  if i11 >_s 0
     br @15
  br @14

@14:
  i8 = i13
  br @17

@15:
  i9 = i12 + 1
  br @3

@16:
  i10 = i12
  br @3

@17:
  if eqz(i8)
     br @18
  br @20

@18:
  if memory[i7] != 42
     br @28
  br @19

@19:
  *(399) = 1
  i8 = i7
  br @20

@20:
  temp11 = i1
  i1 = i8
  temp12 = i16
  i16 = memory[temp11]
  if temp12 & 2
     br @25
  br @21

@21:
  if i16 & 1
     br @22
  br @23

@22:
  i3 = i2
  br @23

@23:
  if eqz(i4)
     br @28
  br @24

@24:
  i2 = i2 + 2
  br @1

@25:
  if i2 >_u 256
     br @27
  br @26

@26:
  br @28

@27:
  return i2 + -2

@28:
  return i3
}

}

